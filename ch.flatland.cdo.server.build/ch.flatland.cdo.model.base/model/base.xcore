@GenModel(featureDelegation="Dynamic",
	rootExtendsClass="org.eclipse.emf.internal.cdo.CDOObjectImpl",
	rootExtendsInterface="org.eclipse.emf.cdo.CDOObject",
	modelPluginVariables="org.eclipse.xtext.xbase.lib org.eclipse.emf.ecore.xcore.lib org.eclipse.emf.cdo",
	childCreationExtenders="true",
	extensibleProviderFactory="true",
	editDirectory="/ch.flatland.cdo.model.base.edit/src",
	modelDirectory="/ch.flatland.cdo.model.base/src",
	creationIcons="false")
package ch.flatland.cdo.model.base

import org.eclipse.emf.cdo.common.security.CDOPermission
import org.eclipse.emf.common.util.BasicEList
import org.eclipse.emf.ecore.EEList
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference

annotation "http://www.eclipse.org/CDO/DBStore" as DBStore

/*
 * <p>
 * Base element all Concepts should at least inherit from.
 * Provides generic features.
 * <p>
 */
abstract class FLID {
	/*
	 * <p>
	 * A universally unique identifier (UUID) is an identifier standard used in software construction.
	 * 
	 * The intent of UUIDs is to enable distributed systems to uniquely
	 * identify information without significant central coordination.
	 * In this context the word unique should be taken to mean
	 * "practically unique" rather than "guaranteed unique".
	 * </p>
	 */
	@GenModel(propertyCategory="ID")
	FLIdentifier UUID
	/*
	 * <p>
	 * ID represents a kind of id from the business perspective. E.g a project id,
	 * test case id. The scope of uniqueness is not clear a this 
	 * abstract level. It depends on the actual concrete sub type.
	 * </p>
	 */
	@GenModel(propertyCategory="ID")
	FLIdentifier ID
	/*
	 * <p>
	 * objectID represents a additional technical id.
	 * </p>
	 */
	@GenModel(propertyCategory="ID")
	FLIdentifier objectID
	@GenModel(propertyCategory="ID")
	FLIdentifier revisionID
	@GenModel(propertyCategory="ID")
	long version
	@GenModel(propertyCategory="ID")
	Date cDate
	@GenModel(propertyCategory="ID")
	Date uDate
	
	op boolean hasPermission(FLID object) {
		if(object.cdoPermission != CDOPermission.NONE) {
			return true
		}
		return false
	}
}

abstract class FLElement extends FLID{
	@GenModel(propertyCategory="Base")
	String[1] name
	@GenModel(propertyMultiLine="true", propertyCategory="Base")
	@DBStore(columnType="CLOB")
	FLMarkdown description
	contains FLTrace[] traces
	contains FLProperty[] properties
	@GenModel(propertyCategory="Base")
	refers EObject derivedContainer get {
		return resolveContainer
	} 
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToOwn get {
		return toFilterByType(FLTraceType.OWN)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToUse get {
		return toFilterByType(FLTraceType.USE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToRealize get {
		return toFilterByType(FLTraceType.REALIZE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToSpecify get {
		return toFilterByType(FLTraceType.SPECIFY)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToImplement get {
		return toFilterByType(FLTraceType.IMPLEMENT)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToElaborate get {
		return toFilterByType(FLTraceType.ELABORATE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToDerive get {
		return toFilterByType(FLTraceType.DERIVE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToValidate get {
		return toFilterByType(FLTraceType.VALIDATE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToTest get {
		return toFilterByType(FLTraceType.TEST)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToRelate get {
		return toFilterByType(FLTraceType.RELATE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToAffect get {
		return toFilterByType(FLTraceType.AFFECT)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToSatisfy get {
		return toFilterByType(FLTraceType.SATISFY)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToVerify get {
		return toFilterByType(FLTraceType.VERIFY)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToRefine get {
		return toFilterByType(FLTraceType.REFINE)
	}
	@GenModel(propertyCategory="Trace to")
	refers FLElement[] traceToTrack get {
		return toFilterByType(FLTraceType.TRACK)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromOwn get {
		return this.fromFilterByType(FLTraceType.OWN)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromUse get {
		return this.fromFilterByType(FLTraceType.USE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromRealize get {
		return this.fromFilterByType(FLTraceType.REALIZE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromSpecify get {
		return this.fromFilterByType(FLTraceType.SPECIFY)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromImplement get {
		return this.fromFilterByType(FLTraceType.IMPLEMENT)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromElaborate get {
		return this.fromFilterByType(FLTraceType.ELABORATE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromDerive get {
		return this.fromFilterByType(FLTraceType.DERIVE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromValidate get {
		return this.fromFilterByType(FLTraceType.VALIDATE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromTest get {
		return this.fromFilterByType(FLTraceType.TEST)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromRelate get {
		return this.fromFilterByType(FLTraceType.RELATE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromAffect get {
		return this.fromFilterByType(FLTraceType.AFFECT)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromSatisfy get {
		return this.fromFilterByType(FLTraceType.SATISFY)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromVerify get {
		return this.fromFilterByType(FLTraceType.VERIFY)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromRefine get {
		return this.fromFilterByType(FLTraceType.REFINE)
	}
	@GenModel(propertyCategory="Trace from", property="None")
	refers FLElement[] traceFromTrack get {
		return this.fromFilterByType(FLTraceType.TRACK)
	}
	op EObject resolveContainer() {
		this.eContainer
	}
	/*
	 * Filters the traces to by trace type.
	 * @return filtered list
	 */
	op FLElement[] toFilterByType(FLTraceType traceType) {
		val targets = new BasicEList
		traces.filter[it.traceType == traceType].forEach [
			if (it.target != null) {
				targets.add(it.target)
			}
		]
		return targets
	}
	/*
	 * Filters the traces from by trace type.
	 * @return filtered list
	 */
	op FLElement[] fromFilterByType(FLTraceType traceType) {
		val sources = new BasicEList
		if (this.cdoView != null && !this.cdoView.isClosed) {
			val xrefs = this.cdoView.queryXRefs(this,
				newArrayList(ch.flatland.cdo.model.base.BasePackage.Literals.FL_TRACE__TARGET))
			for (x : xrefs) {
				val trace = x.sourceObject as FLTrace
				if (trace.traceType == traceType) {
					sources.add(trace.eContainer as FLElement)
				}
			}
		}
		return sources
	}
	/*
	 * <p>
	 * Generic operation to resolve xRefs for an eReference.
	 * Just work when the instance comes from a cdo repository
	 * otherwise an empty list is returned.
	 * </p>
	 */
	op<T extends FLElement> EEList<T> resolveXrefs(EReference eRefernce, Class<T> classType) {
		val elements = new BasicEList
		if (this.cdoView != null && !this.cdoView.isClosed) {
			val xrefs = this.cdoView.queryXRefs(this, newArrayList(eRefernce))
			for (x : xrefs) {
				val element = classType.cast(x.sourceObject)
				elements.add(element)
			}
		}
		return elements
	}
}

class FLPackage extends FLElement {
	contains FLElement[] elements
	@GenModel(propertyCategory="Package")
	refers FLPackage[] subPackages get {
		filterSubPackages
	}
	@GenModel(propertyCategory="Package")
	refers FLElement[] contents get {
		elements.filter[!(it instanceof FLPackage)].asEList
	}
	op FLPackage[] filterSubPackages() {
		elements.filter(FLPackage).asEList
	}
	op FLElement[] filterContents() {
		elements.filter[!(it instanceof FLPackage)].asEList
	}
}

class FLTrace {
	@GenModel(propertyCategory="Trace")
	FLTraceType[1] traceType
	@GenModel(propertyCategory="Trace")
	refers FLElement[1] target
}

/*
 * <p>
 * Expresses the concrete type of a relationship between entities.
 * </p>
 */
enum FLTraceType {
	/*
	 * ---------------------------------------------
	 * UML2
	 * ---------------------------------------------
	 */
	own = 101
	use = 102
	realize = 103
	specify = 104
	implement = 105
	elaborate = 106
	derive = 107
	/*
	 * ---------------------------------------------
	 * Test Management Domain
	 * ---------------------------------------------
	 */
	/* 
	 * OSLC TM - A test case validates a requirement
	 */
	validate = 201
	/* 
	 * OSLC TM / CM - A test case tests a change request
	 */
	test = 202
	/* 
	 *  OSLC TM / CM - A test case relates to a change request
	 */
	relate = 203
	/* 
	 * OSLC TM - A defect may be said to affect a requirement.
	 */
	affect = 204
	/*
	 * ---------------------------------------------
	 * Requirement Management Domain
	 * ---------------------------------------------
	 */
	/*
	 * SYSML REQ - A requirement satisfy a requirement
	 */
	satisfy = 301
	/*
	 * SYSML REQ - A requirement satisfy a requirement
	 */
	verify = 302
	/*
	 * SYSML REQ - A requirement verifies a requirement
	 */
	refine = 303
	/*
	 * ---------------------------------------------
	 * Change Management Domain
	 * ---------------------------------------------
	 */
	/* 
	 * OSLC - CM - A change request tracks the life cycle of a entity
	 */
	track = 401
}

/*
 * Generic Holder for name value pairs
 */
class FLProperty {
	@GenModel(propertyCategory="Property")
	FLIdentifier[1] name
	@GenModel(propertyCategory="Property")
	String[1] value
}

/* 
 * Technical, machine readable identifier should only contain
 * characters matching <em><b>[a-zA-Z0-9_\-\.]*</em></b>
 */
@ExtendedMetaData(name="FLIdentifier", pattern="[a-zA-Z0-9_\\-\\.]*")
type FLIdentifier wraps String

/* 
 * Markdown formatted string
 * http://en.wikipedia.org/wiki/Markdown
 */
type FLMarkdown wraps String

